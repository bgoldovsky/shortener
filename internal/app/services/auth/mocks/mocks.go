// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockgenerator is a mock of generator interface.
type Mockgenerator struct {
	ctrl     *gomock.Controller
	recorder *MockgeneratorMockRecorder
}

// MockgeneratorMockRecorder is the mock recorder for Mockgenerator.
type MockgeneratorMockRecorder struct {
	mock *Mockgenerator
}

// NewMockgenerator creates a new mock instance.
func NewMockgenerator(ctrl *gomock.Controller) *Mockgenerator {
	mock := &Mockgenerator{ctrl: ctrl}
	mock.recorder = &MockgeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockgenerator) EXPECT() *MockgeneratorMockRecorder {
	return m.recorder
}

// RandomString mocks base method.
func (m *Mockgenerator) RandomString(n int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomString", n)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RandomString indicates an expected call of RandomString.
func (mr *MockgeneratorMockRecorder) RandomString(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomString", reflect.TypeOf((*Mockgenerator)(nil).RandomString), n)
}

// Mockhasher is a mock of hasher interface.
type Mockhasher struct {
	ctrl     *gomock.Controller
	recorder *MockhasherMockRecorder
}

// MockhasherMockRecorder is the mock recorder for Mockhasher.
type MockhasherMockRecorder struct {
	mock *Mockhasher
}

// NewMockhasher creates a new mock instance.
func NewMockhasher(ctrl *gomock.Controller) *Mockhasher {
	mock := &Mockhasher{ctrl: ctrl}
	mock.recorder = &MockhasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockhasher) EXPECT() *MockhasherMockRecorder {
	return m.recorder
}

// Sign mocks base method.
func (m *Mockhasher) Sign(value string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockhasherMockRecorder) Sign(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*Mockhasher)(nil).Sign), value)
}

// Validate mocks base method.
func (m *Mockhasher) Validate(value string, dataLength int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", value, dataLength)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockhasherMockRecorder) Validate(value, dataLength interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*Mockhasher)(nil).Validate), value, dataLength)
}
