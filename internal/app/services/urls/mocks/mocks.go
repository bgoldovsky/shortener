// Code generated by MockGen. DO NOT EDIT.
// Source: urls.go

// Package mock_urls is a generated GoMock package.
package mock_urls

import (
	reflect "reflect"

	models "github.com/bgoldovsky/shortener/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockurlRepo is a mock of urlRepo interface.
type MockurlRepo struct {
	ctrl     *gomock.Controller
	recorder *MockurlRepoMockRecorder
}

// MockurlRepoMockRecorder is the mock recorder for MockurlRepo.
type MockurlRepoMockRecorder struct {
	mock *MockurlRepo
}

// NewMockurlRepo creates a new mock instance.
func NewMockurlRepo(ctrl *gomock.Controller) *MockurlRepo {
	mock := &MockurlRepo{ctrl: ctrl}
	mock.recorder = &MockurlRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockurlRepo) EXPECT() *MockurlRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockurlRepo) Add(id, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", id, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockurlRepoMockRecorder) Add(id, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockurlRepo)(nil).Add), id, url)
}

// Get mocks base method.
func (m *MockurlRepo) Get(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockurlRepoMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockurlRepo)(nil).Get), id)
}

// GetList mocks base method.
func (m *MockurlRepo) GetList() ([]models.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList")
	ret0, _ := ret[0].([]models.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockurlRepoMockRecorder) GetList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockurlRepo)(nil).GetList))
}

// Mockgenerator is a mock of generator interface.
type Mockgenerator struct {
	ctrl     *gomock.Controller
	recorder *MockgeneratorMockRecorder
}

// MockgeneratorMockRecorder is the mock recorder for Mockgenerator.
type MockgeneratorMockRecorder struct {
	mock *Mockgenerator
}

// NewMockgenerator creates a new mock instance.
func NewMockgenerator(ctrl *gomock.Controller) *Mockgenerator {
	mock := &Mockgenerator{ctrl: ctrl}
	mock.recorder = &MockgeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockgenerator) EXPECT() *MockgeneratorMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *Mockgenerator) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockgeneratorMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*Mockgenerator)(nil).ID))
}
